#!/bin/bash

# Script para testar cen√°rios de falha no sistema de envio de relat√≥rios
# Este script simula diferentes tipos de erro para validar o retry system

echo "üß™ Testando Sistema de Envio de Relat√≥rios com Retry"
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para simular erro de rede
test_network_error() {
    echo -e "\n${BLUE}üì° Testando: Erro de Rede${NC}"
    echo "Simulando desconex√£o da internet..."
    
    # Desabilitar WiFi temporariamente (macOS)
    networksetup -setairportpower en0 off
    echo "WiFi desabilitado - teste de retry por falta de conex√£o"
    
    sleep 3
    
    # Reabilitar WiFi
    networksetup -setairportpower en0 on
    echo "WiFi reabilitado"
    
    echo -e "${GREEN}‚úÖ Teste de erro de rede conclu√≠do${NC}"
}

# Fun√ß√£o para testar erro de servidor (simulado)
test_server_error() {
    echo -e "\n${BLUE}üñ•Ô∏è Testando: Erro de Servidor${NC}"
    echo "Para testar erro de servidor:"
    echo "1. Modifique temporariamente a API_BASE_URL no constants.dart"
    echo "2. Use uma URL inv√°lida como 'https://invalid-api.example.com'"
    echo "3. Teste o envio de relat√≥rio"
    echo "4. Verifique se o retry funciona corretamente"
    echo "5. Restaure a URL original"
    
    echo -e "${YELLOW}‚ö†Ô∏è Teste manual necess√°rio para erro de servidor${NC}"
}

# Fun√ß√£o para testar upload de arquivos grandes
test_large_file_upload() {
    echo -e "\n${BLUE}üìÅ Testando: Upload de Arquivos Grandes${NC}"
    
    # Criar arquivo de teste de 10MB
    dd if=/dev/zero of=/tmp/test_large_image.jpg bs=1024 count=10240 2>/dev/null
    
    echo "Arquivo de teste criado: /tmp/test_large_image.jpg (10MB)"
    echo "Para testar:"
    echo "1. Adicione este arquivo como imagem no relat√≥rio"
    echo "2. Teste o envio"
    echo "3. Verifique timeout e retry de upload"
    
    # Limpar arquivo de teste
    rm -f /tmp/test_large_image.jpg
    
    echo -e "${GREEN}‚úÖ Arquivo de teste removido${NC}"
}

# Fun√ß√£o para verificar logs do backend
check_backend_logs() {
    echo -e "\n${BLUE}üìã Verificando Logs do Backend${NC}"
    
    if [ -d "./backend" ]; then
        echo "Backend encontrado. Para verificar logs:"
        echo "1. cd backend"
        echo "2. npm run dev (ou pm2 logs se usando PM2)"
        echo "3. Monitore logs durante testes de falha"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Diret√≥rio backend n√£o encontrado${NC}"
    fi
}

# Fun√ß√£o para testar cen√°rios de PDF
test_pdf_scenarios() {
    echo -e "\n${BLUE}üìÑ Testando: Cen√°rios de PDF${NC}"
    echo "Cen√°rios para testar manualmente:"
    echo "1. Relat√≥rio com muitas imagens (>5)"
    echo "2. Imagens de alta resolu√ß√£o"
    echo "3. Campos com muito texto"
    echo "4. Caracteres especiais nos campos"
    echo "5. Falha de upload do PDF gerado"
    
    echo -e "${YELLOW}‚ö†Ô∏è Testes manuais necess√°rios para PDF${NC}"
}

# Fun√ß√£o principal
main() {
    echo "Escolha o tipo de teste:"
    echo "1. Erro de Rede"
    echo "2. Erro de Servidor (manual)"
    echo "3. Upload de Arquivos Grandes"
    echo "4. Verificar Logs Backend"
    echo "5. Cen√°rios de PDF (manual)"
    echo "6. Executar todos os testes autom√°ticos"
    echo "0. Sair"
    
    read -p "Digite sua escolha (0-6): " choice
    
    case $choice in
        1)
            test_network_error
            ;;
        2)
            test_server_error
            ;;
        3)
            test_large_file_upload
            ;;
        4)
            check_backend_logs
            ;;
        5)
            test_pdf_scenarios
            ;;
        6)
            echo -e "\n${BLUE}üîÑ Executando todos os testes autom√°ticos...${NC}"
            test_network_error
            test_large_file_upload
            check_backend_logs
            echo -e "\n${GREEN}‚úÖ Testes autom√°ticos conclu√≠dos${NC}"
            ;;
        0)
            echo "Saindo..."
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida${NC}"
            main
            ;;
    esac
}

# Verifica√ß√µes iniciais
echo -e "${BLUE}üîç Verifica√ß√µes Iniciais${NC}"

# Verificar se est√° no diret√≥rio correto
if [ ! -f "pubspec.yaml" ]; then
    echo -e "${RED}‚ùå Erro: Execute este script no diret√≥rio raiz do projeto Flutter${NC}"
    exit 1
fi

# Verificar se o app est√° buildado
if [ ! -d "build" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Aviso: Build n√£o encontrado. Execute 'flutter build' antes dos testes${NC}"
fi

# Verificar backend
if [ -d "backend" ]; then
    echo -e "${GREEN}‚úÖ Backend encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Backend n√£o encontrado no diret√≥rio atual${NC}"
fi

echo -e "${GREEN}‚úÖ Verifica√ß√µes iniciais conclu√≠das${NC}"

# Instru√ß√µes para teste manual
echo -e "\n${BLUE}üìñ Instru√ß√µes para Teste Manual${NC}"
echo "1. Abra o app Flutter em um dispositivo/emulador"
echo "2. Navegue para criar novo relat√≥rio"
echo "3. Preencha os dados necess√°rios"
echo "4. Execute os testes de falha enquanto tenta enviar"
echo "5. Observe o comportamento do retry system"
echo "6. Verifique as mensagens de erro e progresso"

# Menu principal
main