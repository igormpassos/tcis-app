generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String?  @unique
  name      String?
  role      Role     @default(USER)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reports   Report[]

  @@map("users")
}

model Terminal {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String?  @unique
  prefix    String?
  location  String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  reports   Report[]

  @@map("terminals")
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  code        String?           @unique
  description String?
  category    String?
  active      Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  suppliers   ProductSupplier[]
  reports     Report[]

  @@map("products")
}

model Supplier {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  code      String?           @unique
  contact   String?
  email     String?
  phone     String?
  address   String?
  active    Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  products  ProductSupplier[]
  reports   Report[]

  @@map("suppliers")
}

model ProductSupplier {
  id         Int       @id @default(autoincrement())
  productId  Int
  supplierId Int
  isActive   Boolean?  @default(true)
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  updatedAt  DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  supplier   Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([productId, supplierId])
  @@map("product_suppliers")
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  contact   String?
  emails    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reports   Report[]

  @@map("clients")
}

model Report {
  id                       String    @id @default(uuid())
  prefix                   String
  status                   Int       @default(0)
  terminalId               Int?
  productId                Int?
  supplierId               Int?
  userId                   Int
  hasContamination         Boolean?
  contaminationDescription String?
  homogeneousMaterial      String?
  visibleMoisture          String?
  rainOccurred             String?
  supplierAccompanied      String?
  observations             String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  arrivalDateTime          DateTime?
  departureDateTime        DateTime?
  endDateTime              DateTime
  imageUrls                String[]
  pdfUrl                   String?
  startDateTime            DateTime
  createdBy                Int       @default(1)
  clientId                 Int?
  client                   Client?   @relation(fields: [clientId], references: [id])
  product                  Product?  @relation(fields: [productId], references: [id])
  supplier                 Supplier? @relation(fields: [supplierId], references: [id])
  terminal                 Terminal? @relation(fields: [terminalId], references: [id])
  user                     User      @relation(fields: [userId], references: [id])

  @@map("reports")
}

enum Role {
  ADMIN
  USER
}
