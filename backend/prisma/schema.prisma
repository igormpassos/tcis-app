// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String?  @unique
  name      String?
  role      Role     @default(USER)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reports Report[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Terminal {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String?  @unique
  location  String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reports Report[]

  @@map("terminals")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String?  @unique
  description String?
  category    String?
  active      Boolean  @default(true)
  supplierId  Int?     // Relacionamento com fornecedor
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  supplier Supplier? @relation(fields: [supplierId], references: [id])
  reports  Report[]

  @@map("products")
}

model Supplier {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String?  @unique
  contact   String?
  email     String?
  phone     String?
  address   String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[] // Um fornecedor pode ter muitos produtos
  reports  Report[]

  @@map("suppliers")
}

model Report {
  id                      String    @id @default(uuid())
  prefix                  String
  status                  Int       @default(0) // 0: rascunho (local), 1: finalizado, 2: revisão, 3: enviado
  
  // Relacionamentos
  terminal                Terminal? @relation(fields: [terminalId], references: [id])
  terminalId              Int?
  product                 Product?  @relation(fields: [productId], references: [id])
  productId               Int?
  supplier                Supplier? @relation(fields: [supplierId], references: [id])
  supplierId              Int?
  user                    User      @relation(fields: [userId], references: [id])
  userId                  Int

  // Informações de data/hora unificadas
  startDateTime           DateTime
  endDateTime             DateTime
  arrivalDateTime         DateTime?
  departureDateTime       DateTime?

  // Informações do vagão
  wagonType               String?

  // Informações de controle
  hasContamination        Boolean?
  contaminationDescription String?
  homogeneousMaterial     String?
  visibleMoisture         String?
  rainOccurred            String?
  supplierAccompanied     String?
  observations            String?

  // PDF e imagens gerados
  pdfPath                 String?
  pdfUrl                  String?
  imageUrls               String[] // Array de URLs de imagens

  // Timestamps
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Imagens associadas (mantido para compatibilidade)
  images                  ReportImage[]

  @@map("reports")
}

model ReportImage {
  id        Int      @id @default(autoincrement())
  filename  String
  originalName String
  path      String
  size      Int
  mimetype  String
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId  String
  createdAt DateTime @default(now())

  @@map("report_images")
}
