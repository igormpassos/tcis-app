#!/bin/bash

echo "üöÄ Iniciando Sistema TCIS - Trabalho Final CSI606-2024-02"
echo "==========================================================="
echo ""

# Verificar se est√° no diret√≥rio correto
if [ ! -f "pubspec.yaml" ]; then
    echo "‚ùå Erro: Execute este script no diret√≥rio raiz do projeto"
    exit 1
fi

# Fun√ß√£o para verificar se um comando existe
check_command() {
    if ! command -v $1 &> /dev/null; then
        echo "‚ùå Erro: $1 n√£o est√° instalado"
        echo "   Instale $1 e tente novamente"
        exit 1
    fi
}

# Verificar depend√™ncias
echo "üîç Verificando depend√™ncias..."
check_command "node"
check_command "npm"
check_command "flutter"

echo "‚úÖ Todas as depend√™ncias encontradas"
echo ""

# Fun√ß√£o para aguardar o backend estar pronto
wait_for_backend() {
    echo "‚è≥ Aguardando backend inicializar..."
    for i in {1..30}; do
        if curl -s http://localhost:3000/health > /dev/null 2>&1; then
            echo "‚úÖ Backend est√° funcionando!"
            return 0
        fi
        echo "   Tentativa $i/30..."
        sleep 2
    done
    echo "‚ùå Timeout: Backend n√£o respondeu em 60 segundos"
    return 1
}

# Configurar backend
echo "üîß Configurando backend..."
cd backend

# Verificar se node_modules existe
if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalando depend√™ncias do backend..."
    npm install
fi

# Verificar se o banco de dados foi configurado
echo "üóÑÔ∏è  Configurando banco de dados..."
if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado, criando com configura√ß√µes padr√£o..."
    cat > .env << EOF
NODE_ENV=development
PORT=3000
DATABASE_URL="postgresql://tcis:tcis123@localhost:5432/tcis_dev?schema=public"
JWT_SECRET=desenvolvimento_jwt_secret_super_seguro_123456789
EOF
fi

# Executar migra√ß√µes e seed
echo "üìä Executando migra√ß√µes do banco..."
npx prisma generate
npx prisma migrate deploy 2>/dev/null || npx prisma db push
echo "üå± Populando banco com dados iniciais..."
npm run seed

# Iniciar backend em segundo plano
echo "üñ•Ô∏è  Iniciando servidor backend..."
npm start &
BACKEND_PID=$!

# Voltar para o diret√≥rio raiz
cd ..

# Aguardar backend estar pronto
if ! wait_for_backend; then
    echo "‚ùå Falha ao iniciar backend, encerrando..."
    kill $BACKEND_PID 2>/dev/null
    exit 1
fi

echo ""
echo "üåê Iniciando aplica√ß√£o Flutter no Chrome..."
echo ""

# Verificar se as depend√™ncias do Flutter est√£o instaladas
if [ ! -d ".dart_tool" ]; then
    echo "üì¶ Instalando depend√™ncias do Flutter..."
    flutter pub get
fi

# Iniciar Flutter no Chrome
echo "üöÄ Abrindo aplica√ß√£o no navegador..."
flutter run -d chrome --web-port=8080 &
FLUTTER_PID=$!

# Mostrar informa√ß√µes importantes
echo ""
echo "‚úÖ Sistema TCIS iniciado com sucesso!"
echo "=================================="
echo ""
echo "üìä URLs do Sistema:"
echo "   üåê Aplica√ß√£o Web:  http://localhost:8080"
echo "   üîß API Backend:    http://localhost:3000"
echo "   üìä Health Check:   http://localhost:3000/health"
echo ""
echo "üë• Credenciais de Teste:"
echo "   üîë Administrador:  admin / 123456"
echo "   üë§ Operador:       operador / 123456"
echo ""
echo "üìù Para parar os servi√ßos:"
echo "   Pressione Ctrl+C neste terminal"
echo ""

# Fun√ß√£o para limpeza ao sair
cleanup() {
    echo ""
    echo "üõë Encerrando servi√ßos..."
    kill $BACKEND_PID 2>/dev/null
    kill $FLUTTER_PID 2>/dev/null
    echo "‚úÖ Servi√ßos encerrados"
    exit 0
}

# Capturar sinais de interrup√ß√£o
trap cleanup SIGINT SIGTERM

# Aguardar at√© que o usu√°rio pressione Ctrl+C
echo "‚è≥ Aguardando... (Pressione Ctrl+C para parar)"
wait